//
//  HomeViewModel.swift
//  BrewerieSniffer
//
//  Created by Martin Lukacs on 18/03/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//

import Foundation
import Resolver
import Combine
import Networking
import SwiftUICombineToolBox

enum PageState: Equatable {
    case empty(String)
    case loading
    case full
    
    static let genericEmptyMessage = Self.empty("It's a bit empty here. Let's go looking for a fresh beer")
}

final class HomeViewModel: ObservableObject {

    @Published var query: String = ""
    @Published private(set) var breweries: [Brewery] = []
    @Published private(set) var state: PageState = PageState.genericEmptyMessage
    @Published private(set) var selectedFilter: BreweryType = .none
    
    @Injected private var breweryRepository: BreweryRepositoryContract
    private var cancelBag = CancelBag()
    
    init() {
        setUp()
    }
    
    func setFilterSelection(for filter: BreweryType) {
        selectedFilter = filter
    }
    
    func isCurrentlySelected(for filter: BreweryType) -> Bool {
        selectedFilter == filter
    }
}

private extension HomeViewModel {
    func setUp() {
        fullFilteredQuery
            .subscribe(on: DispatchQueue.global())
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] breweries in
                self?.state = breweries.isEmpty ? PageState.genericEmptyMessage : .full
                self?.breweries = breweries
            })
            .store(in: &cancelBag)
    }
    
    private var isCleanQuery: AnyPublisher<String, Never> {
        $query
            .debounce(for: 0.4, scheduler: RunLoop.main)
            .removeDuplicates()
            .eraseToAnyPublisher()
    }
    
    var fullFilteredQuery: AnyPublisher<[Brewery], Never> {
        Publishers.CombineLatest(isCleanQuery, $selectedFilter)
            .map { [weak self]  query, filter -> AnyPublisher<[Brewery], Never> in
                guard let self = self,
                      let params = self.breweryRepository.filterParams(for: query, and: filter)
                else { return Just([]).eraseToAnyPublisher() }
                self.state = .loading
                return self.breweryRepository.breweries(for: params)
                    .replaceError(with: [])
                    .eraseToAnyPublisher()
            }
            .switchToLatest()
            .eraseToAnyPublisher()
    }
}
